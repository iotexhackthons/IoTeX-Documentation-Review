[["index.html", "IoTeX Documentation Review Chapter 1 Introduction", " IoTeX Documentation Review Ricky Esclapon 2021-05-27 Chapter 1 Introduction My name is Ricky (ETH-0x8115AfD8DFfCE5579381AD27524b6Feeae917BEF) and this is my review of the IoTeX documentation for the following bounty on Gitcoin: https://gitcoin.co/issue/iotexproject/halogrants/32/100025753 This document outlines each section from the IoTeX docs with my comments, starting with The Internet of Trusted Things page in the next section. "],["the-internet-of-trusted-things.html", "Chapter 2 The Internet of Trusted Things 2.1 Overall 2.2 Smaller comments", " Chapter 2 The Internet of Trusted Things 2.1 Overall I personally really like the quick access right off the bat to the different relevant links, but I think for some users it could be a little bit overwhelming and that the two sentence introduction to IoTeX might not be enough. One idea might be to provide a link to a concrete example for each of these for clarity to help people understand at least one example situation in which something like a “Decentralized Identity” could drive value for users. 2.2 Smaller comments For the one that reads ioTube Ethereum &amp; BSC Bridge, the description reads: “Extend the reach of your ERC20 or BEP20 Token to the IoTeX Blockchain to run transactions-intensive tasks.”. A non-technical user might not know that Ethereum is ERC20 and that Binance Smart Chain is connected to BEP20 tokens. So I think it would not hurt to move to something more clear along the lines of: “Extend the reach of your Ethereum (ERC20) or BSC tokens (BEP20) to the IoTeX Blockchain to run transactions-intensive tasks.” "],["software-tools-get-started.html", "Chapter 3 Software Tools - Get Started 3.1 Install ioctl cli", " Chapter 3 Software Tools - Get Started This section is nicely linked, but I think a more narrative approach would be more effective. I think the links are great and useful for a user that already has a clear idea of what they want to do and why, but I think the quick Get Started example should hold the users’ hand even more than this the whole way, and clearly outline why each step will be necessary. So I think a good approach here would be to build something specific and straightforward and walk the user very clearly through the entire process to keep things more grounded and concrete. From there, I think it would be better to clearly explain why one needs to install the ioctl cli, then create an account, then install a local testnet, then interact with the blockchain, etc… Each step is necessary and serves a specific purpose, so it would be good to create a quick overview with a sentence or two detailing why each is necessary before the user actually gets started. I think it could help add clarity to the actual order of operations to have a quick explainer as well as a concrete easy project that users can ground themselves on as they work through the Get Started quickstart example. 3.1 Install ioctl cli Some important notes on this one: https://docs.iotex.io/software-tools/get-started/install-ioctl-cli Here you introduce the IoTeX gateway node, and you explain that it allows users to query and send actions to the blockchain, but I don’t like how it links to that information separately. I believe here you should actually explain what a gateway and what an action is directly rather than linking to the definition separately. And, very importantly, these hyperlinks are BROKEN and need fixing: As of 05/27, the following two links are both broken: https://docs.iotex.io/introduction/node-concept https://docs.iotex.io/introduction/action-concept 3.1.1 Usage The installation does not seem to work on my MacBook Air (M1, 2021) because of its arm64 architecture: I also think the link to the reference for the cli is useful, but having it right below the step makes it seem like the next step. When going through this, I instinctively clicked on that link for the next chapter but was brought to the middle of nowhere in the references and was confusing: 3.1.2 Next Steps I wish I could document my experience with the steps from Create an IoTeX account to IOTX Faucets, but unfortunately the ioctl cli installation does not seem to work on my M1 MacBook Air right now. I will have access to a windows computer again on May 29th and I would gladly give it another go and document my experience here as well. For now adding details for the sections where I am able to. "],["smart-contracts.html", "Chapter 4 Smart Contracts 4.1 Solidity Programming Language 4.2 Advantages of IoTeX Smart Contracts 4.3 Issue XRC20 Tokens on IoTeX 4.4 Token Metadata", " Chapter 4 Smart Contracts Here might be good to give a really basic understanding of what the EVM is, or at least link to a resource for users to learn more. 4.1 Solidity Programming Language Some great links in here and none of them are broken, so all good on that front. One thing that caused some confusion for me was the sentence “compliant with Solidity syntax, up to its latest release.”. Does this mean it’s compliant up to the current latest release (which one?), or does it mean that it will always be compliant with the latest release of Solidity? The one thing that stands out to me here is that there isn’t a very strong introduction around smart contracts, what they actually do, and why they are important. I think just one or two sentences around a smart contract being a way to trust that a protocol will work the way its supposed to work and a quick comparison between this mechanism and how traditional companies work would be really helpful here before you start talking about the specifics of solidity. Might also be worth verbalizing better the connection between the EVM and the Solidity language, and how other smart contract languages exist too. 4.2 Advantages of IoTeX Smart Contracts This section is informative, but I think it should have a link/resource added to it around Roll-DPoS and how that functions, I think that would be more relevant than the tokenomics link. I think it’s a fundamentally important point to understand to truly grasp how you get to 5-second confirmation time, instant finality, and close to $0 transaction fees. And I think it would really drive your point home of why the IoTeX blockchain is the perfect environment for deploying smart contracts that will be used in real-world applications. But really cool that IoTeX smart contracts are backward compatible with the EVM. 4.3 Issue XRC20 Tokens on IoTeX I really love this section and how it’s broken down into step-by-step instructions! Unfortunately though on my end I could not get the IOTX Faucet to actually work. I tried 3 separate times on both Chrome and Firefox and the Google login works great, but when I click “Submit”, something is going wrong there. See error in top right corner here: And not seeing any balance in my account on testnet: I tried doing the steps outlined for ide.iotex.io, but when I click on Compile Contract absolutely nothing is happening (on either environment of Javascript VM or deploy via ioPay). No clue what I am doing wrong: No clue what I’m doing wrong here. But in terms of feedback I think the code in step 2 could optionally be explained in more detail. One idea would be to explain what each step does in more detail through some type of other separate link and be able to dig into each step (like understanding the functionality of each of the three import statements one by one). The code in the documentation looks good, but the code linked on GitHub looks a bit off in terms of having the import link to the proper url and not sure if it’s importing from its own repository or something: Overall though I think the steps as they are outlined are very logical and clear for this section, and it makes sense. 4.4 Token Metadata This section is clear, but I think the metadata itself could be discussed more. I would almost like to see the JSON example from the GitHub repository be added into the official docs and have more of a discussion around what each one represents so people can get a better understanding of what to change and when. I think most people would figure out to change most of these, but would be great to give more details around the type (xrc20 vs. xrc721 and linking to good resources that give a good comparison of the two token standards), as well as the decimals and maybe giving a simple example of choosing one option over another on those two. But the GitHub repository is really great and the New token submission process is very clearly outlined and I have no questions around that process, seems straightforward. The only question that comes to mind here is if one could have their token arbitrarily be rejected (outside of established guidelines). I also really like the code for the Usage section and how it’s way simple code, that’s awesome. "],["test-code.html", "Chapter 5 Test Code", " Chapter 5 Test Code import Antenna from &quot;iotex-antenna&quot;; (async () =&gt; { const antenna = new Antenna(&quot;http://api.testnet.iotex.one:80&quot;); // create a new wallet which contains a public key, a private key, and an address. const wallet = antenna.iotx.accounts.create(); // recover the whole wallet from a single private key const unlockedWallet = antenna.iotx.accounts.privateKeyToAccount( &quot;69805ee813eadffa8fae53d0e6063e5fbf6a6e0fb9e90f6eaad7bc67f3d6c4bd&quot; ); console.log(wallet.address) // get the balance, nonce, number of actions, pendingNonce of the account const accountDetails = await antenna.iotx.getAccount({ address: wallet.address }); })();package main "]]
